var scale_to_use = require('users/emanuelespiritowork/SharedRepo:assets/scale_to_use');

exports.image_stretch = function(img,bands){
  var geometry_of_image = img.geometry();
  var band_names;
  if(bands === undefined){
    print("here");
    band_names = img.bandNames();
    bands = band_names.slice(0,3);
  }else{
    var num_sel_bands = ee.List(bands).size();
    if(!ee.List([num_sel_bands]).contains(3)){
      band_names = img.bandNames();
      bands = band_names.slice(0,3);
    }else{
    }
  }
  
  img = img.select(bands);
  print(img);
  
  var computed_img_std = img.reduceRegion({
    reducer: ee.Reducer.stdDev(),
    scale: scale_to_use.scale_to_use,
    geometry: geometry_of_image,
    bestEffort: true
  }).toArray();
  
  print("computed_img_std",computed_img_std);
  
  var computed_img_mean = img.reduceRegion({
    reducer: ee.Reducer.mean(),
    scale: scale_to_use.scale_to_use,
    geometry: geometry_of_image,
    bestEffort: true
  }).toArray();
  
  var array_of_2 = ee.Array(ee.List([2,2,2]));
  
  var computed_img_min = computed_img_mean.subtract(array_of_2.multiply(computed_img_std));
  print("computed_img_min",computed_img_min);
  
  var computed_img_max = computed_img_mean.add(array_of_2.multiply(computed_img_std));
  print("computed_img_max",computed_img_max);

var vis_specific_image = {
  bands: ee.List(bands).getInfo(),
  min: computed_img_min.toList().getInfo(),
  max: computed_img_max.toList().getInfo()
};

Map.addLayer(img, vis_specific_image, 'img', true);
Map.centerObject(geometry_of_image);

return 0;
}

