var scale_to_use = require('users/emanuelespiritowork/SharedRepo:assets/scale_to_use');

exports.three_bands_image_stretch = function(img,bands){
  var geometry_of_image = img.geometry();
  
  var num_sel_bands = ee.List(bands).size();
  print(num_sel_bands);
  
  print(bands === ee.List([undefined,undefined,undefined]));
  print(bands === ee.List([null,null,null]));
  print(!ee.List([num_sel_bands]).contains(3));
  
  if(img.bandNames().size().gte(3)){
    if(bands === ee.List([undefined,undefined,undefined]) || bands === ee.List([null,null,null]) || !ee.List([num_sel_bands]).contains(3)){
      print("here");
      var band_names = img.bandNames();
      img = img.select(band_names.slice(0,3));
    }else{
      img = img.select(bands);
    }
  }
  
  print(img);
  
  var computed_img_std = img.reduceRegion({
    reducer: ee.Reducer.stdDev(),
    scale: scale_to_use.scale_to_use,
    geometry: geometry_of_image,
    bestEffort: true
  }).toArray();
  
  print("computed_img_std",computed_img_std);
  
  var computed_img_mean = img.reduceRegion({
    reducer: ee.Reducer.mean(),
    scale: scale_to_use.scale_to_use,
    geometry: geometry_of_image,
    bestEffort: true
  }).toArray();
  
  var array_of_2 = ee.Array(ee.List([2,2,2]));
  
  var computed_img_min = computed_img_mean.subtract(array_of_2.multiply(computed_img_std));
  print("computed_img_min",computed_img_min);
  
  var computed_img_max = computed_img_mean.add(array_of_2.multiply(computed_img_std));
  print("computed_img_max",computed_img_max);

var vis_specific_image = {
  bands: ee.List(bands).getInfo(),
  min: computed_img_min.toList().getInfo(),
  max: computed_img_max.toList().getInfo()
};

Map.addLayer(img, vis_specific_image, 'img', true);

return 0;
}

